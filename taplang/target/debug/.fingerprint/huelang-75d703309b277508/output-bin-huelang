{"$message_type":"diagnostic","message":"unused import: `Spanned`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":730,"byte_end":737,"line_start":15,"line_end":15,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"use crate::{ast::*, lexer::{Token, Spanned}};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/parser.rs","byte_start":728,"byte_end":737,"line_start":15,"line_end":15,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"use crate::{ast::*, lexer::{Token, Spanned}};","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/parser.rs","byte_start":722,"byte_end":723,"line_start":15,"line_end":15,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"use crate::{ast::*, lexer::{Token, Spanned}};","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/parser.rs","byte_start":737,"byte_end":738,"line_start":15,"line_end":15,"column_start":43,"column_end":44,"is_primary":true,"text":[{"text":"use crate::{ast::*, lexer::{Token, Spanned}};","highlight_start":43,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Spanned`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:15:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{ast::*, lexer::{Token, Spanned}};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/parser.rs","byte_start":1323,"byte_end":1336,"line_start":32,"line_end":32,"column_start":43,"column_end":56,"is_primary":true,"text":[{"text":"        Token::Var(name) => Some(Lhs::Var(name.as_str())),","highlight_start":43,"highlight_end":56}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser.rs","byte_start":1314,"byte_end":1322,"line_start":32,"line_end":32,"column_start":34,"column_end":42,"is_primary":false,"text":[{"text":"        Token::Var(name) => Some(Lhs::Var(name.as_str())),","highlight_start":34,"highlight_end":42}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"src/ast.rs","byte_start":66,"byte_end":69,"line_start":5,"line_end":5,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Var(String),","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/parser.rs","byte_start":1336,"byte_end":1336,"line_start":32,"line_end":32,"column_start":56,"column_end":56,"is_primary":true,"text":[{"text":"        Token::Var(name) => Some(Lhs::Var(name.as_str())),","highlight_start":56,"highlight_end":56}],"label":null,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:32:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Token::Var(name) => Some(Lhs::Var(name.as_str())),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try using a conversion method: `.to_string()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ast.rs:5:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Var(String),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/parser.rs","byte_start":1245,"byte_end":1365,"line_start":31,"line_end":34,"column_start":15,"column_end":7,"is_primary":true,"text":[{"text":"   let ident= select(|tok: &Token, _| match tok {","highlight_start":15,"highlight_end":50},{"text":"        Token::Var(name) => Some(Lhs::Var(name.as_str())),","highlight_start":1,"highlight_end":59},{"text":"        _ => None,","highlight_start":1,"highlight_end":19},{"text":"    });","highlight_start":1,"highlight_end":7}],"label":"the trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `select`","code":null,"level":"note","spans":[{"file_name":"/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/primitive.rs","byte_start":11652,"byte_end":11658,"line_start":442,"line_end":442,"column_start":14,"column_end":20,"is_primary":false,"text":[{"text":"pub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>","highlight_start":14,"highlight_end":20}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/primitive.rs","byte_start":11723,"byte_end":11734,"line_start":444,"line_end":444,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    I: Input<'src>,","highlight_start":8,"highlight_end":19}],"label":"required by this bound in `select`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:31:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m   let ident= select(|tok: &Token, _| match tok {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Token::Var(name) => Some(Lhs::Var(name.as_str())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _ => None,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `chumsky::input::Input<'src>`:\u001b[0m\n\u001b[0m              `&'src Graphemes` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src [T; N]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src [T]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src str` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `IoInput<R>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m            and 2 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `select`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/primitive.rs:444:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn select<'src, F, I, O, E>(filter: F) -> Select<F, I, O, E>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m444\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    I: Input<'src>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `select`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/parser.rs","byte_start":1266,"byte_end":1267,"line_start":31,"line_end":31,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"   let ident= select(|tok: &Token, _| match tok {","highlight_start":36,"highlight_end":37}],"label":"the trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, lexer::Token>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:31:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m   let ident= select(|tok: &Token, _| match tok {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `chumsky::input::Input<'src>`:\u001b[0m\n\u001b[0m             `&'src Graphemes` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src [T; N]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src [T]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src str` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `IoInput<R>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m           and 2 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, lexer::Token>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `lexer::Token: ValueInput<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/parser.rs","byte_start":1140,"byte_end":1177,"line_start":29,"line_end":29,"column_start":30,"column_end":67,"is_primary":true,"text":[{"text":"pub fn lhs_parser<'src>() -> impl Parser<'src, Token, Lhs> + Clone {","highlight_start":30,"highlight_end":67}],"label":"the trait `ValueInput<'_>` is not implemented for `lexer::Token`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/parser.rs","byte_start":1140,"byte_end":1177,"line_start":29,"line_end":29,"column_start":30,"column_end":67,"is_primary":false,"text":[{"text":"pub fn lhs_parser<'src>() -> impl Parser<'src, Token, Lhs> + Clone {","highlight_start":30,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/parser.rs","byte_start":1644,"byte_end":1649,"line_start":45,"line_end":45,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    ident","highlight_start":5,"highlight_end":10}],"label":"return type was inferred to be `Select<{closure@src/parser.rs:31:22: 31:38}, _, ast::Lhs, _>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `ValueInput<'src>`:\n  `&'src Graphemes` implements `ValueInput<'src>`\n  `&'src [T; N]` implements `ValueInput<'src>`\n  `&'src [T]` implements `ValueInput<'src>`\n  `&'src str` implements `ValueInput<'src>`\n  `IoInput<R>` implements `ValueInput<'src>`\n  `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\n  `MappedSpan<S, I, F>` implements `ValueInput<'src>`\n  `Stream<I>` implements `ValueInput<'a>`\n  `WithContext<S, I>` implements `ValueInput<'src>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Select<{closure@src/parser.rs:31:22: 31:38}, lexer::Token, ast::Lhs, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'src, lexer::Token, ast::Lhs>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `lexer::Token: ValueInput<'_>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:29:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn lhs_parser<'src>() -> impl Parser<'src, Token, Lhs> + Clone {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ValueInput<'_>` is not implemented for `lexer::Token`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ident\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mreturn type was inferred to be `Select<{closure@src/parser.rs:31:22: 31:38}, _, ast::Lhs, _>` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `ValueInput<'src>`:\u001b[0m\n\u001b[0m             `&'src Graphemes` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `&'src [T; N]` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `&'src [T]` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `&'src str` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `IoInput<R>` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `MappedInput<T, S, I, F>` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `MappedSpan<S, I, F>` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m             `Stream<I>` implements `ValueInput<'a>`\u001b[0m\n\u001b[0m             `WithContext<S, I>` implements `ValueInput<'src>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Select<{closure@src/parser.rs:31:22: 31:38}, lexer::Token, ast::Lhs, chumsky::extra::Full<EmptyErr, (), ()>>` to implement `chumsky::Parser<'src, lexer::Token, ast::Lhs>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":524,"byte_end":528,"line_start":18,"line_end":18,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        .parse(toks)","highlight_start":16,"highlight_end":20}],"label":"the trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":518,"byte_end":523,"line_start":18,"line_end":18,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"        .parse(toks)","highlight_start":10,"highlight_end":15}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `parse`","code":null,"level":"note","spans":[{"file_name":"/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/lib.rs","byte_start":12553,"byte_end":12558,"line_start":344,"line_end":344,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"    fn parse(&self, input: I) -> ParseResult<O, E::Error>","highlight_start":8,"highlight_end":13}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/lib.rs","byte_start":11628,"byte_end":11639,"line_start":326,"line_end":326,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"pub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {","highlight_start":27,"highlight_end":38}],"label":"required by this bound in `Parser::parse`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:18:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .parse(toks)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `chumsky::input::Input<'src>`:\u001b[0m\n\u001b[0m              `&'src Graphemes` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src [T; N]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src [T]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `&'src str` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `IoInput<R>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `IterInput<I, S>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m              `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m            and 2 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parse`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/lib.rs:326:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Parser<'src, I: Input<'src>, O, E: ParserExtra<'src, I> = extra::Default> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Parser::parse`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse(&self, input: I) -> ParseResult<O, E::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":518,"byte_end":523,"line_start":18,"line_end":18,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"        .parse(toks)","highlight_start":10,"highlight_end":15}],"label":"the trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `chumsky::input::Input<'src>`:\n  `&'src Graphemes` implements `chumsky::input::Input<'src>`\n  `&'src [T; N]` implements `chumsky::input::Input<'src>`\n  `&'src [T]` implements `chumsky::input::Input<'src>`\n  `&'src str` implements `chumsky::input::Input<'src>`\n  `IoInput<R>` implements `chumsky::input::Input<'src>`\n  `IterInput<I, S>` implements `chumsky::input::Input<'src>`\n  `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\n  `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\nand 2 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, lexer::Token>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `lexer::Token: chumsky::input::Input<'_>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:18:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .parse(toks)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::input::Input<'_>` is not implemented for `lexer::Token`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `chumsky::input::Input<'src>`:\u001b[0m\n\u001b[0m             `&'src Graphemes` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src [T; N]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src [T]` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `&'src str` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `IoInput<R>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `IterInput<I, S>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `MappedInput<T, S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m             `MappedSpan<S, I, F>` implements `chumsky::input::Input<'src>`\u001b[0m\n\u001b[0m           and 2 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `chumsky::extra::Full<EmptyErr, (), ()>` to implement `ParserExtra<'_, lexer::Token>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":524,"byte_end":528,"line_start":18,"line_end":18,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        .parse(toks)","highlight_start":16,"highlight_end":20}],"label":"expected `Token`, found `Vec<Token>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":518,"byte_end":523,"line_start":18,"line_end":18,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"        .parse(toks)","highlight_start":10,"highlight_end":15}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `lexer::Token`\n found struct `Vec<lexer::Token>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the return type of this call is `Vec<lexer::Token>` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":524,"byte_end":528,"line_start":18,"line_end":18,"column_start":16,"column_end":20,"is_primary":false,"text":[{"text":"        .parse(toks)","highlight_start":16,"highlight_end":20}],"label":"this argument influences the return type of `parse`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":496,"byte_end":529,"line_start":17,"line_end":18,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"        let json = lhs_parser()","highlight_start":20,"highlight_end":32},{"text":"        .parse(toks)","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/lib.rs","byte_start":12553,"byte_end":12558,"line_start":344,"line_end":344,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn parse(&self, input: I) -> ParseResult<O, E::Error>","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:18:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .parse(toks)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Token`, found `Vec<Token>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `lexer::Token`\u001b[0m\n\u001b[0m             found struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<\u001b[0m\u001b[0mlexer::Token\u001b[0m\u001b[0m\u001b[1m\u001b[35m>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the return type of this call is `Vec<lexer::Token>` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let json = lhs_parser()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m ____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .parse(toks)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|________________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the return type of `parse`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/peterchon/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chumsky-0.10.0/src/lib.rs:344:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse(&self, input: I) -> ParseResult<O, E::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 7 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
