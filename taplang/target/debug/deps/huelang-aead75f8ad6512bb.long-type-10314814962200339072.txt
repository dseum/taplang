Then<Choice<(To<Padded<Just<char, &str, chumsky::extra::Full<EmptyErr, (), ()>>>, char, fn(_, _) -> _>, To<Padded<Just<char, &str, chumsky::extra::Full<EmptyErr, (), ()>>>, char, fn(_, _) -> _>)>, Foldr<{closure@src/parser.rs:242:26: 242:36}, Repeated<Padded<Just<char, &str, chumsky::extra::Full<EmptyErr, (), ()>>>, char, &str, chumsky::extra::Full<EmptyErr, (), ()>>, Or<Or<Or<chumsky::combinator::Map<impl chumsky::Parser<'_, &str, <&str as SliceInput<'_>>::Slice> + Copy, &str, {closure@src/parser.rs:235:38: 235:47}>, chumsky::combinator::Map<impl chumsky::Parser<'_, &str, Lhs<'_>> + Clone, Lhs<'_>, {closure@src/parser.rs:236:30: 236:35}>>, DelimitedBy<Recursive<dyn chumsky::Parser<'_, &str, ArithExpr<'_>>>, Just<char, &str, chumsky::extra::Full<EmptyErr, (), ()>>, Just<char, &str, chumsky::extra::Full<EmptyErr, (), ()>>, char, char>>, chumsky::combinator::Map<IgnoreThen<Padded<Just<&str, &str, chumsky::extra::Full<EmptyErr, (), ()>>>, impl chumsky::Parser<'_, &str, Type<'_>> + Clone, &str, chumsky::extra::Full<EmptyErr, (), ()>>, Type<'_>, {closure@src/parser.rs:238:58: 238:61}>>, char, chumsky::extra::Full<EmptyErr, (), ()>>, fn(_, _) -> _, fn(Box<Type<'_>>) -> ArithExpr<'_> {ArithExpr::<'_>::Sizeof}, chumsky::extra::Full<EmptyErr, (), ()>>
